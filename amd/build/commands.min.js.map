{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @author      Iñaki Arenaza <iarenaza@mondragon.edu>\n * @author      Stephan Robotta <stephan.robotta@bfh.ch>\n * @copyright   2015 onwards Iñaki Arenaza & Mondragon Unibertsitatea\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getLanguageList, showAllLanguages, isAddLanguage} from './options';\nimport {component, buttonIcon} from './common';\nimport {get_strings as getStrings} from 'core/str';\nimport {applyLanguage, onInit, onBeforeGetContent, onFocus, onSubmit, onDelete} from './ui';\nimport {getButtonImage} from 'editor_tiny/utils';\n\n/**\n * Get the setup function for the button and the menu entry.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        tooltip,\n        removeTag,\n        selectErr,\n        langTagErr,\n    ] = await getStrings([\n          'multilang2:language',\n          'multilang2:desc',\n          'multilang2:removetag',\n          'multilang2:multiBlockElements',\n          'multilang2:langTagsInSelection',\n      ].map((key) => ({key, component}))\n    );\n    const [\n        buttonImage,\n    ] = await Promise.all([\n        getButtonImage('icon', component)\n    ]);\n\n    return (editor) => {\n        const languageList = getLanguageList(editor);\n\n        // If there is just one language, we don't need the plugin.\n        if (languageList.length < 2) {\n            return;\n        }\n\n        // Register the plugin Icon.\n        editor.ui.registry.addIcon(buttonIcon, buttonImage.html);\n\n        editor.ui.registry.addSplitButton(component, {\n            icon: buttonIcon,\n            tooltip: tooltip,\n            fetch: function(callback) {\n                const items = languageList.map((lang) => ({\n                    type: 'choiceitem',\n                    value: lang.iso,\n                    text: lang.label,\n                }));\n                callback(items);\n            },\n            onAction: () => {\n                applyLanguage(editor, null);\n            },\n            onItemAction: (_splitButtonApi, value) => {\n                applyLanguage(editor, value);\n            }\n        });\n\n        editor.ui.registry.addNestedMenuItem(component, {\n            icon: buttonIcon,\n            text: buttonText,\n            getSubmenuItems: () => languageList.map((lang) => ({\n                type: 'menuitem',\n                text: lang.label,\n                onAction: () => {\n                    applyLanguage(editor, lang.iso);\n                },\n            }))\n        });\n\n        // Context menu with languages is shown only when showalllangs is set to false. Otherwise the\n        // List would be overwhelming.\n        if (!showAllLanguages(editor) || isAddLanguage(editor)) {\n            for (const lang of languageList) {\n                editor.ui.registry.addButton(component + '_remove', {\n                    icon: 'remove',\n                    tooltip: removeTag,\n                    onAction: () => {\n                        onDelete(editor, event);\n                    }\n                });\n                if (lang.iso !== 'remove') {\n                    editor.ui.registry.addButton(component + '_' + lang.iso, {\n                        text: lang.iso,\n                        tooltip: lang.label,\n                        onAction: () => {\n                            applyLanguage(editor, lang.iso, event);\n                        }\n                    });\n                }\n            }\n            editor.ui.registry.addContextToolbar(component, {\n                predicate: function(node) {\n                    return node.classList.contains('multilang-begin') || node.classList.contains('multilang-end');\n                },\n                items: languageList.map((lang) => (component + '_' + lang.iso)).join(' '),\n                position: 'node',\n                scope: 'node'\n            });\n        }\n\n        editor.on('init', () => {\n            onInit(editor, {\"multipleBlocksErrMsg\": selectErr, \"langInSelectionErrMsg\": langTagErr});\n        });\n        editor.on('BeforeGetContent', (format) => {\n            onBeforeGetContent(editor, format);\n        });\n        editor.on('focus', () => {\n            onFocus(editor);\n        });\n        editor.on('submit', () => {\n            onSubmit(editor);\n        });\n        editor.on('keydown', (event) => {\n            onDelete(editor, event);\n        });\n\n    };\n};\n"],"names":["_exports","getSetup","async","buttonText","tooltip","removeTag","selectErr","langTagErr","getStrings","map","key","component","buttonImage","Promise","all","getButtonImage","editor","languageList","getLanguageList","length","ui","registry","addIcon","buttonIcon","html","addSplitButton","icon","fetch","callback","lang","type","value","iso","text","label","onAction","applyLanguage","onItemAction","_splitButtonApi","addNestedMenuItem","getSubmenuItems","showAllLanguages","isAddLanguage","addButton","onDelete","event","addContextToolbar","predicate","node","classList","contains","items","join","position","scope","on","onInit","multipleBlocksErrMsg","langInSelectionErrMsg","format","onBeforeGetContent","onFocus","onSubmit"],"mappings":"iPAsJEA,SAAAC,SA/GsBC,UACpB,MACIC,WACAC,QACAC,UACAC,UACAC,kBACM,EAAAC,KAAAA,aAAW,CACf,sBACA,kBACA,uBACA,gCACA,kCACFC,KAAKC,MAAS,CAACA,QAAKC,UAAAA,QAAAA,gBAGpBC,mBACMC,QAAQC,IAAI,EAClB,EAAAC,uBAAe,OAAQJ,QAASA,aAGpC,OAAQK,SACJ,MAAMC,cAAe,EAAAC,SAAeA,iBAACF,QAGrC,KAAIC,aAAaE,OAAS,GAA1B,CAwCA,GAnCAH,OAAOI,GAAGC,SAASC,QAAQC,QAAAA,WAAYX,YAAYY,MAEnDR,OAAOI,GAAGC,SAASI,eAAed,kBAAW,CACzCe,KAAMH,QAAUA,WAChBnB,QAASA,QACTuB,MAAO,SAASC,UAMZA,SALcX,aAAaR,KAAKoB,OAAU,CACtCC,KAAM,aACNC,MAAOF,KAAKG,IACZC,KAAMJ,KAAKK,UAGlB,EACDC,SAAUA,MACN,EAAAC,IAAaA,eAACpB,OAAQ,KAAK,EAE/BqB,aAAcA,CAACC,gBAAiBP,UAC5B,EAAAK,IAAaA,eAACpB,OAAQe,MAAM,IAIpCf,OAAOI,GAAGC,SAASkB,kBAAkB5B,kBAAW,CAC5Ce,KAAMH,QAAUA,WAChBU,KAAM9B,WACNqC,gBAAiBA,IAAMvB,aAAaR,KAAKoB,OAAU,CAC/CC,KAAM,WACNG,KAAMJ,KAAKK,MACXC,SAAUA,MACN,EAAAC,mBAAcpB,OAAQa,KAAKG,IAAI,UAOtC,EAAAS,SAAgBA,kBAACzB,UAAW,EAAA0B,SAAaA,eAAC1B,QAAS,CACpD,IAAK,MAAMa,QAAQZ,aACfD,OAAOI,GAAGC,SAASsB,UAAUhC,QAAAA,UAAY,UAAW,CAChDe,KAAM,SACNtB,QAASC,UACT8B,SAAUA,MACN,EAAAS,IAAQA,UAAC5B,OAAQ6B,MAAM,IAGd,WAAbhB,KAAKG,KACLhB,OAAOI,GAAGC,SAASsB,UAAUhC,QAASA,UAAG,IAAMkB,KAAKG,IAAK,CACrDC,KAAMJ,KAAKG,IACX5B,QAASyB,KAAKK,MACdC,SAAUA,MACN,EAAAC,IAAAA,eAAcpB,OAAQa,KAAKG,IAAKa,MAAM,IAKtD7B,OAAOI,GAAGC,SAASyB,kBAAkBnC,kBAAW,CAC5CoC,UAAW,SAASC,MAChB,OAAOA,KAAKC,UAAUC,SAAS,oBAAsBF,KAAKC,UAAUC,SAAS,gBAChF,EACDC,MAAOlC,aAAaR,KAAKoB,MAAUlB,QAASA,UAAG,IAAMkB,KAAKG,MAAMoB,KAAK,KACrEC,SAAU,OACVC,MAAO,QAEf,CAEAtC,OAAOuC,GAAG,QAAQ,MACd,EAAAC,IAAAA,QAAOxC,OAAQ,CAACyC,qBAAwBnD,UAAWoD,sBAAyBnD,YAAY,IAE5FS,OAAOuC,GAAG,oBAAqBI,UAC3B,EAAAC,IAAkBA,oBAAC5C,OAAQ2C,OAAO,IAEtC3C,OAAOuC,GAAG,SAAS,MACf,EAAAM,IAAAA,SAAQ7C,OAAO,IAEnBA,OAAOuC,GAAG,UAAU,MAChB,EAAAO,IAAAA,UAAS9C,OAAO,IAEpBA,OAAOuC,GAAG,WAAYV,SAClB,EAAAD,IAAQA,UAAC5B,OAAQ6B,MAAM,GAhF3B,CAiFE,CAEL,CACH"}